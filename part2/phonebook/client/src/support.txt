import { useEffect, useState } from "react";
import axios from "axios";
import personService from "./services/persons";

const Filter = ({ search, handleSearchChange, filteredPersons }) => {
  return (
    <>
      <div>
        Filter shown with <input value={search} onChange={handleSearchChange} />
      </div>
      <div>
        {search.trim() && (
          <div>
            {filteredPersons.map((person) => (
              <p key={person.id}>
                {person.name} {person.number}
              </p>
            ))}
          </div>
        )}
      </div>
    </>
  );
};

const PersonForm = ({
  newName,
  newNumber,
  handleNumberChange,
  handlePersonChange,
  addPerson,
}) => {
  return (
    <form onSubmit={addPerson}>
      <div>
        Name: <input value={newName} onChange={handlePersonChange} required />
      </div>
      <br />
      <div>
        Number:{" "}
        <input value={newNumber} onChange={handleNumberChange} required />
      </div>
      <br />
      <div>
        <button type="submit">add</button>
      </div>
    </form>
  );
};

const Persons = ({ persons }) => {
  return (
    <div>
      {persons.map((person) => (
        <p key={person.id}>
          {person.name} {person.number}
        </p>
      ))}
    </div>
  );
};

const App = () => {
  const [persons, setPersons] = useState([]);

  const [newName, setNewName] = useState("");

  const [newNumber, setNewNumber] = useState("");

  const [search, setSearch] = useState("");

  useEffect(() => {
    personService.getAll().then((intialPerons) => {
      setPersons(intialPerons);
    });
  }, []);

  const addPerson = (event) => {
    event.preventDefault();
    if (!newName.trim()) {
      //Prevent adding the person with empty name
      return;
    }
    const newPerson = {
      name: newName,
      number: newNumber,
      id: persons.length + 1,
    };

    const nameExists = persons.some((person) => person.name === newName);
    const numberExists = persons.some((person) => person.number === newNumber);

    if (nameExists && numberExists) {
      window.alert(`${newName} & ${newNumber} is already added to phonebook`);
    } else {
      personService.create(newPerson).then((returnedPerson) => {
        setPersons([...persons, returnedPerson]);
      });
    }

    setNewName("");
    setNewNumber("");
  };

  const handlePersonChange = (event) => {
    setNewName(event.target.value);
  };

  const handleNumberChange = (event) => {
    setNewNumber(event.target.value);
  };

  const handleSearchChange = (event) => {
    setSearch(event.target.value);
  };

  const filteredPersons = persons.filter((person) =>
    person.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      <h2>Phonebook</h2>

      <Filter
        search={search}
        handleSearchChange={handleSearchChange}
        filteredPersons={filteredPersons}
      />

      <h2>Add a new</h2>

      <PersonForm
        newName={newName}
        newNumber={newNumber}
        addPerson={addPerson}
        handleNumberChange={handleNumberChange}
        handlePersonChange={handlePersonChange}
      />

      <h2>Numbers</h2>

      <Persons persons={persons} />
    </div>
  );
};

export default App;
